class Solution {
    public int maximalSquare(char[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        int dp[][] = new int[row + 1][col + 1];
        int res = Integer.MIN_VALUE;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if (i == 0) {
                    dp[i][j] = matrix[i][j] - '0';
                } else if (j == 0) {
                    dp[i][j] = matrix[i][j] - '0';
                } else if (matrix[i][j] == '1') { // j = 1 , i = 1
                    dp[i][j] = Math.min(
                        dp[i - 1][j - 1],
                        Math.min(dp[i - 1][j] , dp[i][j - 1])) + 1;
                } else {
                    dp[i][j] = matrix[i][j] - '0';
                }
                res = Math.max(res, dp[i][j]);
                System.out.println(res + " "+ dp[i][j] + " "+i + " "+j);
            }
        }
        return res * res ;
    }
}
/*



[
["1","0","1","0","0"],
["1","0","1","1","1"],
["1","1","1","1","1"],
["1","0","0","1","0"]
]

[
["1","0","1","0","0"],
["1","0","1","1","1"],
["1","1","1","2","2"],
["1","0","0","1","0"]
]




[
["1","1","1","1","1"],
["1","1","1","1","1"],
["0","0","0","0","0"],
["1","1","1","1","1"],
["1","1","1","1","1"]
]

[
["1","1","1","1","1"],
["1","2","2","2","2"],
["0","0","0","0","0"],
["1","1","1","1","1"],
["1","1","1","1","1"]
]

[["1","1","1","1","0"],["1","1","1","1","0"],["1","1","1","1","1"],["1","1","1","1","1"],["0","0","1","1","1"]]
[["0","1"],["1","0"]]
[["0"]]
*/